/*
 * This file is generated by jOOQ.
*/
package org.tim.notes.data.jooq.tables;


import com.google.gson.JsonElement;
import org.jooq.DataType;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.impl.SQLDataType;
import org.tim.notes.data.jooq.binding.PostgresJsonbBinding;

import java.sql.Timestamp;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
public class Notes extends PostgresTableImpl {

    private static final long serialVersionUID = -860459412;

    /**
     * The reference instance of <code>public.notes</code>
     */
    public static final Notes NOTES = new Notes();

    /**
     * The column <code>public.notes.id</code>.
     */
    public final TableField<Record, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this);

    /**
     * The column <code>public.notes.title</code>.
     */
    public final TableField<Record, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this);

    /**
     * The column <code>public.notes.doc</>
     */
    public final TableField<Record, JsonElement> DOC = createField("doc", POSTGRES_JSONB_TYPE, this);

    /**
     * The column <code>public.notes.tags</>
     */
    public final TableField<Record, UUID[]> TAGS = createField("tags", org.jooq.impl.SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public.notes.created_date</code>.
     */
    public final TableField<Record, Timestamp> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this);

    /**
     * The column <code>public.notes.user_id</code>.
     */
    public final TableField<Record, UUID> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this);

    /**
     * Create a <code>public.notes</code> table reference
     */
    public Notes() {
        super("notes", "public");
    }
}
